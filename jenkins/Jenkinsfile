#!/usr/bin/env groovy

/**
 * Jenkins Pipelines for testing
 */

node {

  // Constants
  final MAINTAINER_NAME = 'mnuaud'
  final BUILD_TAG = 'latest'

  // Registry
  //TODO: modify registry adress, such as test.test.io:8080
  final DOCKER_REGISTRY = 'docker-registry-default.pocapps.poc.s2-eu.capgemini.com:5000'
  final DOCKER_REGISTRY_URL = 'https://'+DOCKER_REGISTRY
  final DOCKER_REGISTRY_CREDENTIALS = 'docker_registry_cred'

  // Github Checkout
  stage ('Checkout code') {
    // clean the working directory
    //step([$class: 'WsCleanup'])

    // checkout the branch of the repository
    git branch: 'master', credentialsId: 'github_ssh', url: 'https://github.com/mnuaud/osh-test-app.git'
  }

  // Docker Build golden images
  stage ('Build & Push Docker Golden Images'){

    // Removing old untagged images
    try{
      sh 'docker rmi $(docker images -q --filter "dangling=true")'
    } catch (Exception e){
      // Nothing
    }

    docker.withRegistry(DOCKER_REGISTRY_URL, DOCKER_REGISTRY_CREDENTIALS) {
    
      // Build the common container
      imageCommon = docker.build("${MAINTAINER_NAME}/test-base:${BUILD_TAG}", 'docker/osh-test-base')
      imageCommon.push(BUILD_TAG)

      // Build the cache container
      imageCache = docker.build("${MAINTAINER_NAME}/test-cache:${BUILD_TAG}", 'docker/osh-test-cache')
      imageCache.push(BUILD_TAG)
      
      // Build the Web frontoffice container
      imageWebFront = docker.build("${MAINTAINER_NAME}/test-web:${BUILD_TAG}", 'docker/osh-test-web')
      imageWebFront.push(BUILD_TAG)
      
    }
  }

  // TODO check source code is correctly copied in the container at the good location
  // TODO check commit are working with given build_tags, add another build buildtag if not

  stage ('Build Web FRONT image') {
    containerWebFront = imageWebFront.withRun[] {
      // retrieve container ID
      containerWebFrontId = containerWebFront.id
      // copy front code in the image
      sh "docker cp webfiles/* ${containerWebFrontId}:/var/www/testsite"
      // commit change to create a new web-front image
      sh "docker commit ${containerWebFrontId} ${MAINTAINER_NAME}/test-web:${BUILD_TAG}"
    }
  }
 
  stage('Push Web back & front images to Registry'){
    docker.withRegistry(DOCKER_REGISTRY_URL, DOCKER_REGISTRY_CREDENTIALS) {
      imageWebFront.push(BUILD_TAG)
      imageWebBack.push(BUILD_TAG)
    }
  }
}